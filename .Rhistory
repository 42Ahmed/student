attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, dim = c(4,5))
my_matrix2 <- matrix(1:20, 4,5, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrow = 4, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrows = 4, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrow = 4, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5, byrow = TRUE)
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data)<- cnames
my_data
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
sqirl()
swirl()
mydf <- read.csv(path2cv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version(dplyr)
package_version('dplyr')
packageVersion('dplyr')
cran <- tbl_df(mydf).
cran <- tbl_df(mydf)
rm('mydf')
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "India")
filter(cran, r_version <= "3.0.2", country == "In")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size + 100500,  r_os == "linux-gnu")
filter(cran, size = 100500,  r_os == "linux-gnu")
filter(cran, size == 100500,  r_os == "linux-gnu")
filter(cran, size > 100500,  r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, r_version != is.na())
filter(cran, r_version != is.na(R.version))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id )
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm('mydf')
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View()
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(unique >465)
top_unique <- filter(unique > 465)
top_unique <- filter(pack_sum,unique > 465)
View(top_unique)
top_unique_sorted <- arrange(desc(unique))
top_unique_sorted <- arrange(top_unique,desc(unique))
View()
View(top_unique_sorted)
submit()
submit()
submit()
View()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex, count, -grade)
students2
res <- gather(students,sex_class, count ,-grade)
res <- gather(students2,sex_class, count ,-grade)
res
?seperate
??seperate
>separate
?separate
seprate(data = res, col = sex_class, into = c('sex','class'))
separate(data = res, col = sex_class, into = c('sex','class'))
submit()
students3
submit()
submit()
?spread
sumbit()
submit()
submit()
sumbit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = 'passed' )
failed <- mutate(failed, status = 'failed' )
bind_rows(passed, failed)
sat
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
swirl()
str(mpg)
qplot(displ,hwy data = mpg)
qplot(displ,hwy, data = mpg)
qplot(displ,hwy, data = mpg, aes(color = drv)
)
qplot(displ,hwy, data = mpg, color = drv)
qplot(displ,hwy, data = mpg, color = drv, geom = c(point, smooth))
qplot(displ,hwy, data = mpg, color = drv, geom = c('point', 'smooth'))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(displ,hwy, data = mpg, color = drv, geom = )
qplot(drv,hwy, data = mpg, color = drv, geom = 'boxplot')
qplot(drv,hwy, data = mpg, geom = 'boxplot')
qplot(drv,hwy, data = mpg, geom = 'boxplot', color = 'manufacturer')
qplot(drv,hwy, data = mpg, geom = 'boxplot', color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.,binwidth = 2)
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
5 == 7
5 !== 7
5 != 7
!(5 == 7)
FALSE && FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
1
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(rvest)
web <- read_html('https://en.wikipedia.org/wiki/Table_(information)')
web_table <- web |>
html_nodes('.wikitable') |>
html_table()
web_table[1]
web_table <- web %>%
html_nodes('.wikitable') |>
html_table()
web_table[1]
library(rvest)
web <- read_html('https://en.wikipedia.org/wiki/Table_(information)')
web_table <- web %>%
html_nodes('.wikitable') %>%
html_table()
web_table[1]
1 + 2 %>%
*2
1 + 2 %>%
* 2
1 + 2 %>%
+ 2
1 + 2 %>%
+ 2
1 + 1 %>%
+ 1
edxsubjects <- read_html("https://web.archive.org/web/20200801210910/https://www.edx.org/subjects")
library(rvest)
edxsubjects <- read_html("https://web.archive.org/web/20200801210910/https://www.edx.org/subjects")
subjectshtml<-html_nodes(edxsubjects, ".align-items-center")
subjecttext<-html_text(subjectshtml)
print(subjecttext)
subjectshtml<-html_nodes(edxsubjects, ".mb-4+ .mb-4")
subjecttext<-html_text(subjectshtml)
print(subjecttext)
subjectshtml<-html_nodes(edxsubjects, ".mb-4+ .mb-4 img")
subjecttext<-html_text(subjectshtml)
print(subjecttext)
subjectshtml<-html_nodes(edxsubjects, ".mb-4+ .mb-4 .align-items-center")
subjecttext<-html_text(subjectshtml)
print(subjecttext)
subjectshtml<-html_nodes(edxsubjects, ".align-items-center")
subjecttext<-html_text(subjectshtml)
print(subjecttext)
subjectshtml<-html_nodes(edxsubjects, ".mb-4+ .mb-4 .align-items-center")
subjecttext<-html_text(subjectshtml)
print(subjecttext)
print(count(subjecttext))
subjecttext<-html_text(subjectshtml)
print(count(subjecttext))
print(n(subjecttext))
print(length(subjecttext))
print(length(subjecttext[]))
print(length(subjecttext[[]]))
print(subjecttext)
print(length(subjecttext))
#Part A
dbinom(x =7,size = 10,prob = 0.65)
#Part B
?pbinom
#Part B
pbinom(7, size = 1o, prob = 0.65)
#Part B
pbinom(7, size = 10, prob = 0.65)
#Part B
pbinom(7, size = 10, prob = 0.65,lower.tail = FALSE)
#Part B
pbinom(6, size = 10, prob = 0.65,lower.tail = FALSE)
#Part B
pbinom(7, size = 10, prob = 0.65,)
#Part C
1 - pbinom(6, size = 10, prob = 0.65)
#Part C
1 - pbinom(6, size = 10, prob = 0.65)
#Part C
pbinom(6, size = 10, prob = 0.65, left.tail = FALSE)
#Part C
pbinom(6, size = 10, prob = 0.65, lower.tail = FALSE)
#Part C
pbinom(5, size = 10, prob = 0.65, lower.tail = FALSE)
1 - pbinom(5, size = 10, prob = 0.65)
?punif
estimated_pf <- binom_draws %>%
group_by(successes) %>%
summarise(n=n()) %>%
mutate(freq=n/sum(n))
punif(0.5, min = 0, max = 1)
punif(0.6, min = 0, max = 1)
punif(0.7, min = 0, max = 1)
punif(1, min = 0, max = 1)
# Define the functions for CDFs
F_X <- function(x) {
(3/5) * x^2 + (2/5) * x
}
F_Y <- function(y) {
(3/5) * y + (2/5) * y^3
}
# Generate a sequence of values
x_values <- seq(0, 1, by = 0.01)
y_values <- seq(0, 1, by = 0.01)
# Plot the CDFs
plot(x_values, F_X(x_values), type = "l", col = "blue", ylim = c(0, 1), ylab = "CDF", xlab = "Value", main = "CDF of X and Y")
lines(y_values, F_Y(y_values), col = "red")
legend("bottomright", legend = c("F_X", "F_Y"), col = c("blue", "red"), lty = 1)
print(1+1)
print(2+2)
mkdir
mkdir('worst_student')
dir.create("nth_studend")
ls()
ls
setwd("~/Desktop")
pwd()
setwd("C:/Users/Ahmed/Desktop")
dir.create("nth_student")
setwd("nth_student/")
file.create("DESCRIPTION")
file.create("LICENSE")
library(devtools)
use_r('nth_student')
ls()
print(ls())
source("C:/Users/Ahmed/Desktop/nth_student/R/nth_student.R", echo=TRUE)
data_load <- function() {
# List files in the working directory
files <- list.files()
cat("Files in the working directory:\n")
print(files)
# Prompt the user to select a file
file_name <- readline("Enter the name of the data file to load (e.g., 'data.csv'): ")
# Check if the file exists
if (!file_name %in% files) {
cat("The file does not exist in the working directory.\n")
return(NULL)
}
# Determine the file extension
file_extension <- tools::file_ext(file_name)
# Read the data based on the file type
if (file_extension == "csv") {
data <- read.csv(file_name)
} else if (file_extension == "txt") {
data <- read.table(file_name, header = TRUE)
} else {
cat("Unsupported file type. Please provide a .csv or .txt file.\n")
return(NULL)
}
# Count the number of existing datasets named 'df<i>' and save the new one
existing_dfs <- ls(pattern = "^df\\d+$", envir = .GlobalEnv)
new_index <- length(existing_dfs) + 1
assign(paste0("df", new_index), data, envir = .GlobalEnv)
# Notify the user
cat(paste0("Data loaded successfully and saved as 'df", new_index, "'.\n"))
}
source("C:/Users/Ahmed/Desktop/nth_student/R/nth_student.R", echo=TRUE)
file.create("NAMESPACE")
load_all()
load_all()
load_all()
load_all()
load_all()
rm(list = c("data_load", "design"))
load_all()
data_load()
#### 3. Create basic models and statistics ####
npk <- npk
write.csv(npk, row.names = FALSE)
write.csv(npk,"C/Desktop/npk" ,row.names = FALSE)
write.csv(npk,"~/Desktop/npk" ,row.names = FALSE)
write.csv(npk,"~/npk" ,row.names = FALSE)
write.csv(npk,"~/npk.csv" ,row.names = FALSE)
data_load()
design()
design()
design()
design()
load_all
load_all
load_all()
data_plot_all(npk.csv)
data_plot_all(npk)
data_plot_all(df1)
load_all()
data_plot_all_2()
data_plot_all_2()
load_all()
data_plot_all(df1)
data_plot_all(df1)
load_all()
data_plot_all()
load_all()
design()
load_all()
data_load()
design()
data_load()
data_load()
load_all()
data_load()
design()
data_plot_all()
load_all()
data_load()
design()
data_plot_res()
data_plot_res(df1, res)
data_plot_res(df1, res1)
View(df1)
View(df1)
data_plot_res(df1, residuals)
data_plot_res(df1)
load_all()
data_load()
design()
data_plot_res(df1)
data_plot_all()
load_all()
data_load()
design()
data_plot_res()
data_plot_all()
load_all()
data_load()
data_plot_all()
load_all()
load_all()
dir.create("man")
file.create("man/nth_student.Rd")
load_all()
document()
?nth_student
?data_plot_all
?data_plot_res
?design
load_all()
?nth_student
load_all()
load_all()
?nth_student
load_all()
load_all()
?nth_student
load_all()
?nth_student
load_all()
?nth_student
load_all()
load_all()
?nth_student
load_all()
?nth_student
?nth_student
load_all()
?nth_student
load_all()
?nth_student
load_all()
?nth_student
load_all()
?nth_student
load_all()
?nth_student
build()
?nth_student
load_all()
?nth_student
build()
?nth_student
load_all()
?nth_student
build()
load_all()
build()
build()
library(student)
library(nth_student)
?nth_student
library(nth_student)
load_all()
?student
load_all()
?student
build()
